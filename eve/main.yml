---
version: 0.2

branches:
  feature/*, improvement/*, bugfix/*, w/*, q/*, hotfix/*:
    stage: "pre-merge"


models:
- env: &docker_env
    DEVELOPMENT_DOCKER_IMAGE_NAME: 'registry.scality.com/%(prop:git_slug)s-dev/%(prop:git_slug)s'
    PRODUCTION_DOCKER_IMAGE_NAME: 'registry.scality.com/%(prop:git_slug)s/%(prop:git_slug)s'

- ShellCommand: &docker_login
    name: Login to docker registry
    command: docker login -u "${HARBOR_LOGIN}" -p "${HARBOR_PASSWORD}" registry.scality.com
    usePTY: true
    env:
      HARBOR_LOGIN: '%(secret:harbor_login)s'
      HARBOR_PASSWORD: '%(secret:harbor_password)s'

- ShellCommand: &wait_docker_daemon
    name: Wait for Docker daemon to be ready
    command: |
      bash -c '
      for i in {1..150}
      do
        docker info &> /dev/null && exit
        sleep 2
      done
      echo "Could not reach Docker daemon from buildbot worker" >&2
      exit 1'
    haltOnFailure: true

stages:
  pre-merge:
    worker:
      type: local
    steps:
    - TriggerStages:
        name: trigger all the tests
        stage_names:
        - run-tests
        - docker-build
  run-tests:
    worker: &workspace
      type: kube_pod
      path: eve/workers/unit_and_feature_tests/pod.yml
      images:
        unit_and_feature_tests:
          context: .
          dockerfile: eve/workers/unit_and_feature_tests/Dockerfile
        kafka: eve/workers/kafka
    steps:
      - Git: &git
          name: fetch source
          repourl: '%(prop:git_reference)s'
          shallow: True
          retryFetch: True
          haltOnFailure: True
      - ShellCommand:
          name: run static analysis tools on markdown
          command: yarn run --silent lint_md
      - ShellCommand:
          name: run static analysis tools on code
          command: yarn run --silent lint
      - ShellCommand:
          name: run unit tests
          command: yarn test
          env:
            BACKBEAT_CONFIG_FILE: "tests/config.json"
      - ShellCommand:
          name: run bucket scanner unit tests
          command: ginkgo -r --randomizeAllSpecs --randomizeSuites --failOnPending --cover --trace --race --progress -nodes 1 -stream -timeout 5m -slowSpecThreshold 60
          workdir: '%(prop:builddir)s/build/bucket-scanner'
      - ShellCommand:
          name: run backbeat routes test
          command: bash ./eve/workers/unit_and_feature_tests/run_server_tests.bash ft_test:api:routes
          workdir: '%(prop:builddir)s/build'
          env:
            CI: "true"
            BACKBEAT_CONFIG_FILE: "tests/config.json"
            MANAGEMENT_BACKEND: operator
      - ShellCommand:
          name: run backbeat retry tests with account authentication
          command: bash ./eve/workers/unit_and_feature_tests/run_server_tests.bash ft_test:api:retry
          workdir: '%(prop:builddir)s/build'
          env:
            CI: "true"
            BACKBEAT_CONFIG_FILE: "tests/config.json"
      - ShellCommand:
          name: run feature replication tests
          command: bash ./eve/workers/unit_and_feature_tests/run_ft_tests.bash ft_test:replication
          env:
            CI: "true"
            BACKBEAT_CONFIG_FILE: "tests/config.json"
      - ShellCommand:
          name: run feature lifecycle tests
          command: bash ./eve/workers/unit_and_feature_tests/run_ft_tests.bash ft_test:lifecycle
          env:
            CI: "true"
            BACKBEAT_CONFIG_FILE: "tests/config.json"
      - ShellCommand:
          name: run feature ingestion tests
          command: bash ./eve/workers/unit_and_feature_tests/run_ft_tests.bash ft_test:ingestion
          env:
            CI: "true"
            BACKBEAT_CONFIG_FILE: "tests/config.json"
      - ShellCommand:
          name: run misc functional tests
          command: bash ./eve/workers/unit_and_feature_tests/run_ft_tests.bash ft_test:lib
          env:
            CI: "true"
            BACKBEAT_CONFIG_FILE: "tests/config.json"
      - ShellCommand:
          name: run backbeat notification feature tests
          command: yarn run ft_test:notification
          env:
            CI: "true"

# The docker-build stage will ensure that your images is built on every commit
# and also hosted on the registry to help you pull it up and test it on a real environment if needed.
# It will also allow us to pull it and rename it when performing a release.
  docker-build:
    worker: &docker_worker
      type: kube_pod
      path: eve/workers/docker/pod.yaml
      images:
        worker: eve/workers/docker
    steps:
      - Git: *git
      - ShellCommand: *wait_docker_daemon
      - ShellCommand: *docker_login
      - ShellCommand:
          name: docker build
          command: >-
            docker build .
            --tag=${DEVELOPMENT_DOCKER_IMAGE_NAME}:%(prop:commit_short_revision)s
          env: *docker_env
          haltOnFailure: true
      - ShellCommand:
          name: push docker image into the development namespace
          command: docker push ${DEVELOPMENT_DOCKER_IMAGE_NAME}
          haltOnFailure: true
          env: *docker_env

# This stage can be used to release your docker image.
# To use this stage:
# 1. Tag the repository
# 2. Force a build with the following parameter:
#    * A given branch that ideally match the tag
#    * Use the release stage
#    * Extra property named tag with the value of the name of the tag itself.
  release:
    worker:
      type: local
    steps:
    - TriggerStages:
        stage_names:
        - docker-release
        haltOnFailure: true
  docker-release:
    worker: *docker_worker
    steps:
    - Git: *git
    - ShellCommand:
        name: Checkout tag
        command: git checkout refs/tags/%(prop:tag)s
    - ShellCommand: *wait_docker_daemon
    - ShellCommand: *docker_login
    - ShellCommand:
        name: docker build
        command: >-
          docker build .
          --tag=${PRODUCTION_DOCKER_IMAGE_NAME}:%(prop:tag)s
        env: *docker_env
    - ShellCommand:
        name: publish docker image to Scality Production OCI registry
        command: docker push ${PRODUCTION_DOCKER_IMAGE_NAME}:%(prop:tag)s
        env: *docker_env
